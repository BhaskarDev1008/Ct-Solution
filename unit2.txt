package q10880;
public class ForDemo {
	public static void main(String[] args) {
		// Fill in the missing code for the for-loop that prints 1 to 10 
	int i=1;	
		while (i>0 &&i<=10) {
			System.out.println(i);
			i++;	

\\

package q10882;
public class APowerN {
	public void powerOf(int A, int N) {
		int ans = 1;
		// Fill in the missing code using the for loop calculate A to the power N 
		 while( N!=0) {
			ans*=A;
			--N;
		}
		System.out.println("APowerN = " + ans);

\\

package q10883;
public class FactorialCalculator {
	public void factorial(int n) {
		int factorial = 1;
		//Fill in the missing code using the for loop
		int i=1;
		while(i<=n){
			factorial*=i;
			i++;
		}
		
		System.out.println("Factorial of " + n + " = " + factorial);

\\

package q10884;
class PrintAlphabet

{
	
	public static void main(String args[])
	
	{
		
		char ch;
		
		
		
		for( ch = 'A' ; ch <= 'Z' ; ch++ )
		
		System.out.println(ch);
		
\\

package q10885;

public class PrimeVerify{
 boolean isPrime(int n)
	
	{
		
		// Corner cases
		
		if (n <= 1)
		
		return false;
		
		if (n <= 3)
		
		return true;
		
		if (n % 2 == 0 || n % 3 == 0)
		
		return false;
		
		
		
		for (int i = 5; i * i <= n; i = i + 6)
		
		if (n % i == 0 || n % (i + 2) == 0)
		
		return false;
		
		
		
		return true;
		
	}
	
	
	public void checkPrimeOrNot(int n){
		if(isPrime(n)){
			System.out.println(n+" is a prime number");
		}else{
			System.out.println(n + " is not a prime number");

\\


package q10886;
class Factorial{
	
	public static void main(String[] args ){
		
		int i,fact=1;
		
		int number=Integer.parseInt(args[0]);
		
		for(i=1;i<=number;i++){
			
			fact=fact*i;
			
		}
		
		System.out.println("Factorial of "+number+" is "+fact);
		
\\

package q10888;
public class WhileDemo {
	public void printNumbers(int max) {
		int num = 1;
		// Fill in the missing code using a while loop to print from 1 to max
		  while(num<=max) {
			System.out.println(num);
			num++;
			
\\

package q10889;
public class PrintFiveTimes {
	public static void main(String[] args) {
		int i = 0;
		while (i <5 ) { // complete the condition here 
			System.out.println("Ganga");//write the text to be printed here
			i = i + 1;

\\

package q10890;
public class PrintThreeTimes {
	public static void main(String[] args) {
		int i = 0;
		while (i<3 ) {
			System.out.println("Thames");
			i ++ ;

\\

package q10891;
public class Armstrong

{
	
	
	
	static boolean isArmstrong(int n)
	
	{
		
		int temp, digits=0, last=0, sum=0;
		
		
		
		temp=n;
		
		
		
		while(temp>0)
		
		{
			
			temp = temp/10;
			
			digits++;
			
		}
		
		temp = n;
		
		while(temp>0)
		
		{
			
			
			
			last = temp % 10;
			
			
			
			sum +=  (Math.pow(last, digits));
			
			//removes the last digit
			
			temp = temp/10;
			
		}
		
		
		
		if(n==sum)
		
		
		
		return true;
		
		
		
		else return false;
		
	}
	
	//driver code
	
	public static void  main(String args[])
	
	{
		
		int num=Integer.parseInt(args[0]);
		

		
	
		
		
		
	
		
		if(isArmstrong(num))
		
		{
			
			System.out.println("The given number " +num+ " is an armstrong number");
			
		}
		
		else
		
		{
			
			System.out.println("The given number " + num + " is not an armstrong number");
			

\\

package q10892;

public class PrimeNumbers {
	
	public void primeInLimits(int start, int end) {
	for(int i = start ; i <= end ; i++)
	
	{
		
		//logic for checking number is prime or not
		
		int count = 0;
		
		for(int j = 1 ; j <= i ; j++)
		
		{
			
			if(i % j == 0)
			
			count = count+1;
			
		}
		
		if(count == 2)
		
		System.out.print(i+" ");
		

\\

package q10893;
class SumAndReverseNumber {
	
	
	
	static int reversDigits(int num)
	
	{
		
		
		
		// Making input hard coded else
		
	//	num = 25;
		
		// else do not initialize num
		
		
		
		
		
		int rev = 0, rem;
		
		
		
		// Statements to be executed in do loop
		
		do {
			
			// Reversal of a number as discussed in
			
			// algorithm
			
			rem = num % 10;
			
			rev = rev * 10 + rem;
			
			num = num / 10;
			
			
			
		}
		
		
		
		// Condition check
		
		while (num > 0);
		
		
		
		// Returning reverse of the user enter number
		
		return rev;
		
	}
	
	
	
	
	
	static int sumDigits(int num)
	
	{
		
		
		
	//	num = 25;
		
		
		
		// Creating remainder variable
		
		int sum = 0, rem;
		
		
		
		
		
		do {
			
			
			
			rem = num % 10;
			
			sum = sum + rem;
			
			num = num / 10;
			
			
			
		}
		
		// condition check
		
		while (num > 0);
		
		
		
		return sum;
		
	}
	
	
	
	public static void sumAndReverseANumber(int num)
	
	{
		
		// num = Integer.parseInt(args[0]);
		
	//	System.out.println(num);
		
		
		
		System.out.println("Sum of digits : "+ sumDigits(num));
		
		System.out.println("Reverse : "+ reversDigits(num));
		
		
\\

package q10894;

public class NumberPalindrome {
	
	public void isNumberPalindrome(int num) {
		
		//Write your code here
		int  reversedNum = 0, remainder;
		
		
		
		// store the number to originalNum
		
		int originalNum = num;
		
		
		
		// get the reverse of originalNum
		
		// store it in variable
		
		while (num != 0) {
			
			remainder = num % 10;
			
			reversedNum = reversedNum * 10 + remainder;
			
			num /= 10;
			
		}
		
		
		
		// check if reversedNum and originalNum are equal
		
		if (originalNum == reversedNum) {
			
			System.out.println(originalNum + " is a palindrome");
			
		}
		
		else {
			
			System.out.println(originalNum + " is not a palindrome");
			

\\

package q10895;
public class DoWhileDemo {
	public void printNumbers(int max) {
		int num = 1;
		
		// Fill in the missing code using do-while statement to print 1 to max
		
		  do {
			System.out.println(num);
			num++;
		}while (num<=max) ;

\\

package q10896;
class FibonacciSeries{
	
	static void Fibonacci(int N)
	
	{
		
		int num1 = 0, num2 = 1;
		
		
		
		int counter = 0;
		
		
		
		// Iterate till counter is N
		
		while (counter < N) {
			
			
			
			// Print the number
			
			System.out.print(num1 + " ");
			
			
			
			// Swap
			
			int num3 = num2 + num1;
			
			num1 = num2;
			
			num2 = num3;
			
			counter = counter + 1;
			
		}
		
	}
	

	
	
	
	public static void main(String[] args)
	
	{
		int n=Integer.parseInt(args[0]);
		int a=0,b=1,c;
		int k=0;
		
		
		do{
			
			if(k==0){
				System.out.print(a);
				k=1;
			}else{
				
			
			
			System.out.print(" "+a);
			}
			
			
			
			c=a+b;
			
			
			
			a=b;
			
			
			
			b=c;
			
			
			
		}while(a<=n);
		
		
		
\\

package q10897;

public class BreakDemo {
	/**
	 * Calculate sum of numbers till the -ve number occures
	 * 
	 * 
	 * @return sum
	 */ 
	
	public int calculateSum(int[] arr) {
	
		//Write your code here
		int sum =0 ;
		
		for (int i=0;i<arr.length;i++){
			
			if(arr[i]<0){
				
				break;
				
			}else{
				
				sum+=arr[i];
				
			}
			
		}
		
		return sum;
		
	
\\

package q10898;
public class BreakTargetDemo {
	public static void main(String[] args) {
		OuterLoop:
			for (int i = 20; i < 25; i++) {
				System.out.println("i = " + i);
				InnerLoop :
					for (int j = 1; j < 10; j++) {
						
						// Write code to break OuterLoop, when i is a multiple of 11
						
				
							
							
							
							if(i%11 ==0){
								
								break OuterLoop;
								
							}
							
							if(j%5==0){
								
								break InnerLoop;
								
							}
							
					
						
						
						
						// Write code to break InnerLoop, when j is a multiple of 5
						
						
						
						
						System.out.println("j = " + j);


\\

package q10899;
public class ContinueDemo {
	public void skipEven(int[] arr) {
		// Fill in the missing code
		for ( int i=0;i<arr.length;i++) {
			if(arr[i]%2==0){
				continue;
			}
			
			System.out.println(arr[i]);

\\

package q10900;
public class ContinueTargetDemo {
	public static void main(String[] args) {
		OuterLoop:
			for (int i = 20; i < 25; i++) {
				System.out.println("i = " + i);
				InnerLoop :
					for (int j = 1; j < 10; j++) {
						// Fill in the missing code
						
						//Condition 1
						if(i%2==0) continue OuterLoop;
						if(j%3==0) continue InnerLoop;
						
						//Condition 2
						
						
						
						System.out.println("j = " + j);


\\


		// dummy text

		System.out.println("Printing Ramanujan Numbers: ");
		for (int i = 0; i < n; i++)
			System.out.println(ramanujanNumbers[i]);


\\

// dummy text 
		for (int[] arr : int2DArr) {
			for (int value : arr) {
				System.out.print(value + " ");
			}
			System.out.println();


\\

// dummy text
		
		int j = 0;
		for(int[] a : int2DArr) {
			for(int val : a) {
				if (j < n) {
					System.out.print(val + " ");
				}
			}
			j+=1;
			System.out.println();
		


\\

package q11053;
public class AdditionOfMatrix {
	
	public int[][] add(int[][] m1, int[][] m2) {
		// Write the code
		
		
		int sum[][]=new int[m1.length][m1.length];
	//	if(m1.length!=m2.length) return null;
		for(int i=0;i<m1.length;i++ ){
			for(int j=0;j<m2.length;j++){
				if(m1[i][j]!=m2[i][j])
				{
				sum[i][j]=m1[i][j]+m2[i][j];
				}else {
					return null;
				}
			}
		}
		return  sum;
		

\\

package q11105;
public class TransposeMatrix {

	
public int[][] transposeMatrix(int[][] m) {
		
		// Write the code
	//	if(m.length<=0) return null;
		int copy[][]=new int [m[0].length][m.length];
		for(int i=0;i<m.length;i++){
			for(int j=0;j<m[0].length;j++){
			copy[j][i]= m[i][j];
			}
		}
	return copy;


\\

package q11106;
public class MultiplicationOfMatrix{
	public int[][] multiplication(int[][] m1, int[][] m2) {
		
		// Write your logic here for matrix multiplication
		int r=m1.length,c=m1[0].length;
		int r1=m2.length,c1=m2[0].length;
		int ans[][]=new int [r][c1];
		for(int i=0;i<r;i++){
			for(int j=0;j<c1;j++){
				for(int k=0;k<r1;k++){
					if(r1==c){
						ans[i][j]+=m1[i][k]*m2[k][j];
					}else{
						return null;
					}
				}
			}
		}
		return ans;
		

\\


package q10936;
public class RiverNamePrinter {
	public static void main(String[] args) {
		String[] namesArr = { "Ganga", "Yamuna", "Godavari", "Krishna", "Narmada", "Kaveri" };
		for (String river : namesArr) {
			System.out.println(river);


\\


package q10937;

public class MountainNamePrinter {
	
	public static void main(String[] args) {
		
		String[] namesArr = { "Nanda Devi", "Kamet", "K12", "Dunagiri"};
		
		for (String river : namesArr) {
			
			System.out.println(river);
			
\\

package q10939;
public class CityNameFinder {
	
	
	public void findElement(int index) {
		//Write your code here
		
		
		String[] namesArr = { "Mumbai", "Delhi", "Kolkata", "Chennai", "Hyderabad", "Bangalore"};
		
		if(index>=0 && index<namesArr.length) {
			
			System.out.println(namesArr[index]);
			
		}else{
			
			System.out.println("Wrong Index");
			

\\

package q10940;
public class IndexFinder {
	public void printIndex(int[] intArr, int element) {
		for (int i = 0; i < intArr.length; i++) {
			if (intArr[i] == element) {
				System.out.println(i);


\\

package q10941;

public class IndexFinder {
	
	
	public int printIndex(int[] intArr, int element) {
		
		//Write your code here
		int ans=0;
		
		for (int i = 0; i < intArr.length; i++) {
			
			if (intArr[i] == element) {
				
			ans= i;
				
				break;
				
			}
			
			}
		return ans;
		
\\

package q10942;
public class ArrayElementCounter {
	public int countElement(int[] arr, int element) {
		int count = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == element) {
				count++;
			}
		}
		return count;

\\

package q10943;

public class ArrayElementCounter {
	 
	public int countElement(int[] arr, int element) {
		//Write your code here
	
	
	int count = 0;
	
	for (int i = 0; i< arr.length; i++) {
		
		if (arr[i] == element) {
			
			count++;
			
		}
		
	}	return count;
		

\\

package q10944;

public class ArrayReverser {
	
	public int[] reverseArray(int[] arr) {
		//Write your code here
		int ans[]= new int [arr.length];
		int j=arr.length;
		for(int i=0;i<arr.length;i++){
			ans[j-1]=arr[i];
			j--;
		}
		return ans;


\\

package q11039;

public class BubbleSorting{
	
	public static void bubbleSort(int[] array){
		
		int arrsize= array.length;
		
		int temp;
		
		for(int i=0;i<arrsize-1;i++){
			
			for(int j=0;j<arrsize-i-1;j++){
				
				if(array[j]>array[j+1]){
					
					temp=array[j];
					
					array[j]=array[j+1];
					
					array[j+1]=temp;
					
				}
				
			}
			
		}
		
		for(int k=0;k<arrsize;k++){
			
			System.out.println(array[k]);
			

\\

package q11040;

public class InsertionSorting{
	
	public static void insertionSort(int[] array){
		
		
		
		int size =array.length;
		
		for(int i=1;i<size;i++){
			
			int key = array[i];
			
			int j=i-1;
			
			
			
			while(j >=0 && key < array[j]){
				
				array[j+1]=array[j];
				
				--j;
				
			}
			
			array[j+1]=key;
			
		}
		
		for(int k=0;k<size;k++){
			
			System.out.println(array[k]);
			

\\

package q11041;

public class SelectionSortingLargestElement{
	
	public static  void selectionSortLargestEle(int[] array){
		
		int  size = array.length;
		
		
		
		for(int i=0;i<size-1;i++){
			
			int lowest = i;
			
			
			
			for(int j= i+1;j<size;j++){
				
				if(array[j]<array[lowest]){
					
					lowest = j;
					
					
					
				}
				
			}
			
			int temp = array[i];
			
			array[i]=array[lowest];
			
			array[lowest]=temp;
			
			
			
		}
		
		for(int k=0;k<size;k++){
			
			System.out.println(array[k]);
			

\\

package q11042;

public class SelectionSortingSmallestElement{
	
	public static void selectionSortSmallestEle(int[] array){
		
		int small;
		
		int size=array.length;
		
		for(int i=0;i<size-1;i++){
			
			small=i;
			
			for(int j=i+1;j<size;j++){
				
				if(array[j]<array[small]){
					
					small=j;
					
				}
				
			}
			
			int temp = array[small];
			
			array[small]=array[i];
			
			array[i]=temp;
			
			
			
		}
		
		for(int k=0;k<size;k++){
			
			System.out.println(array[k]);
			

\\

// dummy text

    
private void doMergeSort(int lowerIndex, int higherIndex) {
	
	if(lowerIndex<higherIndex){
		
		int middle= lowerIndex +(higherIndex - lowerIndex)/2;
		
		doMergeSort(lowerIndex,middle);
		
		doMergeSort(middle+1,higherIndex);
		
		mergeParts(lowerIndex,middle,higherIndex);
		
		
	}
}
private void mergeParts(int lowerIndex, int middle, int higherIndex) {
	
	for(int i=lowerIndex;i<=higherIndex;i++){
		
		tempMergArr[i]=array[i];
		
		
		
	}
	
	int i = lowerIndex;
	
	int j=middle+1;
	
	int k=lowerIndex;
	
	
	
	while(i<=middle && j <=higherIndex){
		
		if(tempMergArr[i] <= tempMergArr[j]){
			array[k]=tempMergArr[i];
			
			i++;
			
		} else{
			
			array[k]=tempMergArr[j];
			
			j++;
			
		}
		
		k++;
		
	}
	
	while(i<=middle){
		
		array[k]=tempMergArr[i];
		
		k++;
		
		i++;
		

\\

package q11044;

public class LinearSearch{
	
	public static int linearS(int [] array,int key ){
		
		int size=array.length;
		
		for(int i=0;i<size;i++){
			
			if(array[i]==key){
				
				return i;
				
			}
			
		}
		
		return-1;
		
	}
	
	public static void linearSearch(int [] array,int key ){
		
		int lpu=linearS(array,key);
		
		if(lpu== -1){
			
			System.out.println("Search element "+key+" is not found");
			
		} else{
			
			System.out.println("Search element "+key+" is found at position : " +lpu);
			

\\

package q11045;

public class BinarySearch{
	
	public static int binaryS(int[] array,int key){
		
		int low = 0;
		
		int high = array.length-1;
		
		while(low<=high){
			
			int mid = low +(high-low)/2;
			
			if(array[mid] == key ){
				
				return mid;
				
			}
			
			
			
			if(array[mid] <key ){
				
				low = mid-1;
				
			}else{
				
				high = mid -1;
				
			}
			
		}
		
		return-1;
		
		
		
	}
	
	public static void binarySearch(int[] array,int key){
		
		int lpu = binaryS(array,key);
		
		if(lpu==-1){
			
			System.out.println("Search element "+key+" is not found");
			
		}else{
			
			System.out.println("Search element "+key+" is found at position : "+lpu);
			

\\

package q11046;
public class SumOfElements {
	
	public long sum(int[] arr) {
		// Write the code
		if(arr.length==0){
			return 0;
		}
	long sum=0;
		for(int i=0;i<arr.length;i++){
			sum+=arr[i];
		}
		return sum;


\\

package q11047;
public class ReversePrint {
	
	 public int[] reversePrint(int[] arr) {
	 	//Wrtie code here
	 	int j=arr.length,ans[]=new int [arr.length];
	 	for(int i=0;i<arr.length;i++){
	 		ans[j-1]=arr[i];
	 		j--;
	 	}
	 	return ans;


\\


package q11049;
public class ElementCount {
	public static void main(String[] args) {
		int[] arr = {1, 12, 9, 3, 5, 3, 78, 4, 3, 9, 18, 56, 1, 5};
		int element = Integer.parseInt(args[0]);
		int cnt=0;
		for(int i=0;i<arr.length;i++){
			if(element==arr[i]){
				cnt++;
			}
		}
	System.out.println(cnt);
		

\\

package q11050;
public class ElementCheck {
	
	public boolean checkFirstOrLast(int[] arr1, int[] arr2) {
		//Write your code here
		if(arr1[0]==arr2[0] || arr1[arr1.length-1]==arr2[arr2.length-1]){
			return true;
		}else{
			return false;


\\


package q11055;

public class ElementCheck {
	

	public boolean elementFinder(int[] arr) {
		
		//Write your code here
		if(arr[0]==arr[arr.length-1]){
			return true;
		}else{
			return false;
			

\\


package q11057;

public class SumOfElements {
	
	
		public int sum(int[] arr) {
			
			//Write your code here
			int sum=0;
			for(int i=0;i<arr.length;i++){
				if(arr[i]>=0){
					
				
				sum+=arr[i];
				}
			}
			return sum;
	
\\


package q11064;

public class SequenceCount {
	
	public int sequenceCount(int[] arr) {
		int count=0,i=0;
		//Write your code here
		while(arr!=null && i<arr.length-2){
			if((arr[i+1]== 2*arr[i])  && (arr[i+2] == 3*arr[i]) ){
				count++;
			}
			i++;
		}
		return count;
		
\\

package q11065;
public class SumOfArrays {
	
	public int[] sum(int[] arr1, int[] arr2) {
		//Write your code here
		int ans[]=new int [arr1.length];
		for(int i=0;i<arr1.length;i++){
			ans[i]=arr1[i]+arr2[i];
		}
		return ans;

\\

package q11066;

public class CompareArrays {
	
	public boolean compareArrays(int[] arr1, int[] arr2) {
		//Write your code here
	boolean	ans=(arr1.length==arr2.length)?true:false;
	return ans;

\\

package q11067;

public class CompareArrays {
	
	public boolean compareArrays(int[] arr1, int[] arr2) {
		
		//Write your code here
		boolean ans=(arr1.length==arr2.length)?true:false;
		int count=0;
		if(ans==true){
		for(int i=0;i<arr1.length;i++){
			if(arr1[i]==arr2[i]){
				count++;
		}
		}
		}
		if(ans==false || count<arr1.length){
			return false;
		}else{
			return true;

\\

package q11068;
public class ElementCheck {
	
	public boolean checkElement(int[] arr, int arg1, int arg2) {
		
		//Write your code here
	int count=0;
		for(int i=0;i<arr.length;i++){
			if(arr[i]==arg1 || arr[i]==arg2){
				count++;
			}
		
		}
	
    	if(count==arr.length ){
			return true;
		}else{
			return false;

\\

package q11072;

public class FindAverage {
	
	public int findAverage(int[] arr) {
		
		int ans=0;
		for(int i=0;i<arr.length;i++){
			ans+=arr[i];
		}
		return ans/arr.length;
		
\\

package q11073;

public class FindDuplicate {
	
	public boolean findDuplicate(int[] arr, int arg) {
		//Write your code here
		boolean ans=false;
		int count=0;
		for(int i=0;i<arr.length;i++){
			if(arr[i]==arg){
		count++;
			
			if(count>1){
			return true;
			}
		}
		}
		return false;

\\

package q11074;

public class SumOfSameNumber {
	
	public boolean findSumOf(int[] arr, int arg) {
		//Write your code here
		int count=0;
		for(int i=0;i<arr.length;i++){
			if(arr[i]==arg) count++;
		}
		if(count*arg>=10) return true;
		else return false;

\\

package q11075;

public class CountOfTwoNumbers {
	
	public boolean compareCountOf(int[] arr1, int arg1, int arg2) {
		//write your code here
		int c1=0,c2=0;
		for(int i=0;i<arr1.length;i++){
			if(arr1[i]==arg1) c1++;
		}
		for(int i=0;i<arr1.length;i++){
			if(arr1[i]==arg2) c2++;
		}
		if(c1>c2) return true;
		else return false;

\\

package q11076;

public class CheckAlternateNo {
	
	public boolean checkAlternate(int[] arr, int arg) {
		
		//Write your code here
		int n=arr.length;
		int c1=0,c2=0;
		for(int i=0;i<n;i+=2){
			
				if(arr[i]==arg) return true;
				else return false;

		}
		 return true;

		
		
\\

package q11082;

public class ElementCheckInEveryPair {
	
	public boolean checkElement(int[] arr, int arg) {
		//Write your code here
	
	
	boolean t = false;
	
	for(int i=0; i<arr.length-1; i++){
		
		if(arr[i] == arg || arr[i+1] == arg){
			
			t = true;
		}		
			else{
				
				return false;
			}
	}
				return t;

			

\\

package q11087;

public class CompareArrays {
	
	public int compare(int[] arr1, int[] arr2) {
		//Write your code here
		int count=0;
		
		for (int i=0;i<arr1.length; i++) {
			
			int d = arr1[i] - arr2[i];
			
			if(d>-2 && d<2){
				
				count++;
				
			}
		}		
			return count;
			
\\

package q11088;

public class CheckSurroundedElement {
	
	public void checkElement(int[] arr) {
		//Write your code here
		int count=0;
		
		for (int i=1;i<arr.length; i++) {
			
			if(arr[i]!=arr[i-1] && arr[i]!=arr[i+1]){
				
				System.out.println(arr[i]);
				
				
				
\\

package q11089;

public class ReorderArray {
	
	 
	public int[] reorder(int[] arr) {
		//Write your code here
		int[] a = new int[arr.length];
		
		int j=0;
		
		for(int i=0; i<arr.length; i++) {
			
			if(arr[i] ==0){
				
				a[j]=0;
				
				j++;
				
			}
		}
			
			for (int t=0; t<arr.length; t++){
				
				if(arr[t] !=0){
					
					a[j] = arr[t];
					
					j++;
					
				}
				
			}
			
			return a;

\\

package q11090;

public class ReorderArray {
	
	 
	public int[] reorder(int[] arr) {
		
		//Write your code here
		int[] a = new int[arr.length];
		
		int j=0;
		
		for(int i=0; i<arr.length; i++) {
			
			if(arr[i]%2 ==0){
				
				a[j]=arr[i];
				
				j++;
				
			}
		}	
			for (int t=0; t<arr.length; t++){
				
				if(arr[t]%2 !=0){
					
					a[j] = arr[t];
					
					j++;
					
				}
				
			}
			
			return a;
			
\\

package q11091;
public class MultiplesInArray {
	
	public void findMultiples(int[] arr, int m1, int m2) {
		
		for(int i=0; i<arr.length; i++){
			
			if(arr[i]%m1==0 && arr[i]%m2==0) {
				
				System.out.println(arr[i] + " is multiple of " + m1 + " and "+ m2);
			}
				else if(arr[i]%m2==0){
					
					System.out.println(arr[i] +" is multiple of " + m2);
				}
					else if (arr[i]%m1==0){
						
						System.out.println(arr[i]+" is multiple of " + m1);
					}
						else
						
						System.out.println(arr[i]);
					
		
\\

package q11092;
public class FindCenteredAverage {
	
	public int findCenteredAverage(int[] arr) {
		
		int sum = 0, avg=0;
		
		for (int t=0; t<arr.length-1; t++){
			
			for (int j=0; j<arr.length-t-1; j++){
				
				if(arr[j]>arr[j+1]){
					
					int tt =arr[j];
					
					arr[j] = arr[j+1];
					
					arr[j+1] = tt;
					
				}
			}
		}		
				for (int i=1; i<arr.length-1; i++){
					
					sum = sum + arr[i];
					
					avg = sum / (arr.length-2);
				}		
					return avg;
					
\\
	
package q11096;

public class SymmetricalArrayCheck {
	
	public boolean checkSymmetry(int[] arr, int n) {
		//Write your code here
		boolean t=false;
		
		for (int i=0; i<n; i++){
			
			if(arr[i]==arr[arr.length-n+i]){
				
				t=true;
				
				
				
			}else{
				
				return false;
				
			}
			
		}
		
		return true;
		
\\

package q11097;

public class SequenceCheck {
	
	public boolean checkSequence(int[] arr) {
		//Write your code here
		boolean t=false;
		
		for (int i=0; i<arr.length-2; i++){
			
			if(arr[i+1]==arr[i]+1 && arr[i+2]==arr[i+1]+1){
				
				return true;
				
				
				
			}
			
		}
		
		return t;
		
	
\\

package q11154;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;

\\

package q11155;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;


\\

package q11217;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;

\\


package q11142;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;

\\

package q11143;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;

\\

package q11159;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;

\\

package q11160;
public class Student {
private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;

\\

package q11161;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	


	public Student(String name, String rollNo, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;


\\

package q11126;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";


\\

package q11125;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";


\\

package q11128;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String name, String id, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	

	
	public String toString() {
		return "Student [name = " + name + ", id = " + id + ", age = " + age + ", gender = " + gender + "]";

\\

package q11129;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public String toString() {
		return "Student [name = " + name + ", id = " + id + ", age = " + age + ", gender = " + gender + "]";

\\

package q11130;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public String toString() {
		return "Student [name = " + name + ", id = " + id + ", age = " + age + ", gender = " + gender + "]";

\\

package q11131;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public String toString() {
		return "Student [name = " + name + ", id = " + id + ", age = " + age + ", gender = " + gender + "]";

\\

package q11132;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";


\\

package q11134;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";

\\

package q11135;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";

\\

package q11136;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";

\\

package q11137;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String  getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";


\\

package q11138;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";

\\

package q11140;
public class Student {
	private String id;
	private String name;
	private int age;
	private char gender;
	
	public Student(String id, String name, int age, char gender) {
		this.id = id;
		this.name = name;
		this.age = age;
		this.gender = gender;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGender(char gender) {
		this.gender = gender;
	}
	
	public char getGender() {
		return gender;
	}
	
	public String toString() {
		return "Student [id = " + id + ", name = " + name + ", age = " + age + ", gender = " + gender + "]";

\\

package q11115;



public class Employee {
	
	 String name,destination;
	 
	 int age;
	 
	 double salary;
	 
	 
	 
	 public void setData(String name, int age,String destination,double salary) {
	 	
	 	this.name=name;
	 	
	 	this.age=age;
	 	
	 	this.destination=destination;
	 	
	 	this.salary=salary;
	 	
	 }
	 
	 public void displayData() {
	 	
	 	System.out.println("Name : " + name);
	 	
	 	System.out.println("Age : " + age);
	 	
	 	System.out.println("Designation : " + destination);
	 	
	 	System.out.println("Salary : " + salary);
	 	
	 }
	 
	 public static void main(String[] args) {
	 	
	 	int age=Integer.parseInt(args[1]);
	 	
	 	double salary =Double.parseDouble(args[3]);
	 	
	 	Employee obj =new Employee();
	 	
	 	obj.setData(args[0],age,args[2],salary);
	 	
	 	obj.displayData();
	 	
	 	
\\

package q11116;


public class Staff {
	
	 String name;
	 
	 int id;
	 
	 
	 
	 public void show(int id ,String Name) {
	 	
	 	System.out.println("Id : " + id);
	 	
	 	System.out.println("Name : " + Name);
	 	
	 	
	 	
	 }
	 
	 public static void main(String[] args) {
	 	
	 	Staff obj =new Staff();
	 	
	 	
	 	
	 	obj.show(Integer.parseInt(args[0]),args[1]);
	 	
	 	
\\


package q11117;
public class Box {
	// Declare variables
	float l,b,h;
	public Box(float l, float b, float h) {
		// Write the code
		this.l=l;
		this.b=b;
		this.h=h;
	}
	public float volume() {
		// Write the code
		return l*b*h;
	}
	public int compare(Box b) {
		// Write the code
		if(this.volume()>b.volume()) return 1;
		else return -1;
	}
	public static void main(String args[]) {
		int flag;
		Box box1 = new Box(Float.parseFloat(args[0]), Float.parseFloat(args[1]), Float.parseFloat(args[2]));
		Box box2 = new Box(Float.parseFloat(args[3]), Float.parseFloat(args[4]), Float.parseFloat(args[5]));
		flag = box1.compare(box2);
		if (flag == 1)
			System.out.println("box1 is larger than box2");
		else if (flag == 0)
			System.out.println("box1 is same size as box2");
		else
			System.out.println("box1 is smaller than box2");

\\


package q11119; import java.util.*;
public class Person {
	private String name;
	private int age;
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public String toString() {
		return "person = Person [name = " + name + ", age = " + age + "]";
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String p_name = sc.nextLine();
		int p_age = sc.nextInt();
		Person obj = new Person(p_name,p_age);
		System.out.println(obj);
		System.out.println("name of person is : " + obj.getName());
\\

package q11121;
class Person {
	private String name;
	private int age;
	
	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setAge(int age) {
		if (age > 0) { 
			this.age = age;	
		}
	}
	
	public String toString() {
		return "Person [name = " + name + ", age = " + age + "]";
	}
}

public class Test {	
	public static void main(String[] args) {
		Person p1 = new Person("Albert Einstein", 25);
	//	System.out.println("name of p1 is : " + p1.name); //the line with error
		System.out.println("name of p1 is : " + p1.getName());

\\

package q11144;
public class StringLiterals {
	public static void main(String[] args) {
		String aStr = "Himalayas";
		String bStr = "are beautiful";
		String spaceStr = " ";
		String emptyStr = "";//This is an empty string that does nothing.
		System.out.println(aStr + spaceStr + bStr + "." + emptyStr);

\\

package q11145; import java.util.*;
public class StringLiterals {
	public static void main(String[] args) { Scanner sc = new Scanner(System.in);
		String str1 = sc.nextLine();
		String str2 = new String(str1);
		System.out.println("str1 == str2 : " + (str1 == str2));
		System.out.println("str1.equals(str2) : " + (str1.equals(str2)));


\\


package q11150;
public class StringConcatenation {
	public static void main(String[] args) {
		System.out.println("Hello!" + " I am learning Java.");
		System.out.println("Total = " + 3 + 2);
		System.out.println("Total = " + (3 + 2));


\\

package q11151;
import java.util.*;
public class StringMethods {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
		System.out.println("Length : " + str.length());
		System.out.println("2nd character : " + str.charAt(1));
		System.out.println("Upper case : " + str.toUpperCase());
		System.out.println("Lower case : " + str.toLowerCase());

\\
package q11152;
public class TestStringMethods {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.length());
		
\\

package q11153;
public class TestStringMethods {
	
	
	
	public static void main(String[] args) {
		
		
		
		String str = args[0];
		
		
		
		System.out.println(str.charAt(4));
	
\\

package q11162;
public class TestStringMethods {
	
	
	
	public static void main(String[] args) {
		
		
		
		String str = args[0];
		
		
		
		System.out.println(str.toLowerCase());
		
\\

package q11163;
public class TestStringMethods {
	
	
	
	public static void main(String[] args) {
		
		
		
		String str = args[0];
		
		
		
		System.out.println(str.toUpperCase());
		
		
\\

package q11164;

// dummy text
		System.out.println("equals : " + str1.equals(str2));
		System.out.println("equalsIgnoreCase: " + str1.equalsIgnoreCase(str2));
		System.out.println("startsWith " + str1.startsWith("J"));
		System.out.println("endsWith " + str2.endsWith("is"));

\\

package q11165;


public class StringCompare {
	
	public static void main(String[] args) {
		
		String str1 = args[0];
		
		String str2 = args[1];
		
		System.out.println(str1.equals(str2));
		
\\

package q11166;


public class StringCompare {
	
	public static void main(String[] args) {
		
		String str1 = args[0];
		
		String str2 = args[1];
		
		System.out.println(str1.equalsIgnoreCase(str2));
		

\\

package q11167;

public class StringCompare {
	
	public static void main(String[] args) {
		
		String str1 = args[0];
		
		System.out.println(str1.startsWith("pre"));
		
		
\\

package q11168;


public class StringCompare {
	
	public static void main(String[] args) {
		
		String str1 = args[0];
		
		
		
		System.out.println(str1.endsWith("ed"));
		
		
\\

package q11169;
public class StringCompare {
	public static void main(String[] args) {
		System.out.println("The result with equals : " + args[0].equals(args[1]));
		System.out.println("The result with == : " + (args[0]==args[1]));

\\


package q11170;


public class StringCompareTo {
	
	public static void main(String[] args) {
		
		int ans = args[0].compareTo(args[1]);
		
		if(ans>0) System.out.println("arg1 is lesser than arg2");
		
		else if(ans==0) System.out.println("arg1 and arg2 are equal");
		
		else System.out.println("arg1 is greater than arg2");
		
		
\\

package q11171;
public class StringMethods {
	public static void main(String[] args) {
		String str = "special char &";
		System.out.println(str.indexOf("char"));
		System.out.println(str.indexOf(' '));
		System.out.println(str.lastIndexOf(' '));
		System.out.println(str.lastIndexOf("a", 8));
		System.out.println(str.indexOf("sp", 4));

\\

package q11172;


public class StringIndexOf {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.indexOf("CA"));

\\

package q11173;


public class StringIndexOf {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.indexOf("CA",2));
		
\\

package q11174;


public class StringLastIndexOf {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.lastIndexOf("*"));
		

\\

package q11175;



public class StringLastIndexOf {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		int idx=str.lastIndexOf("TX");
		
		String s=str.substring(0,idx);
		
		
		System.out.println(s.lastIndexOf("TX"));
		
\\


// dummy text

String s1 = str.substring(index);
int s2 = str.indexOf(substr);
System.out.println(s1);
System.out.println(str.substring(s2));


\\

package q11177;


public class SubstringText {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.substring(7));
		
\\

package q11178;


public class SubstringText {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.substring(5,13));
		
\\


package q11179;
public class StringMethods {
	public static void main(String[] args) {
		String str = " Six seasons   ";
		System.out.println("length = " + str.length());
		System.out.println("length after trim = " + str.trim().length());
		System.out.println(str.replace(' ', '*'));
		System.out.println(str.trim().replace("Six", "Four"));

\\

package q11180;


public class StringTrim{
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.trim());
		
\\

package q11181;


public class StringReplace{
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		System.out.println(str.replace("c", "k"));
		
\\
		// dummy text
		String[] splits = str.split("/");
		for (String s : splits) {
			System.out.println(s);

\\

package q11183;


public class StringSplit {
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		String[] splits = str.split(args[1]);
		
		for (String s : splits) {
			
			System.out.println(s.trim());
			
\\

package q11184;


public class PalindromeOrNot{
	
	public static void main(String[] args) {
		
		String str = args[0];
		
		String rev=new StringBuffer(str).reverse().toString();
		
		if(str.equals(rev)) {
			System.out.println("The given string " + str + " is a palindrome");
		}
		
		else {
			System.out.println("The given string " + str + " is not a palindrome");
		

\\

package q11185;
public class StringFormatting {
	public static void main(String[] args) {
		int iVar = 432000;
		System.out.printf("Integer variable = %d%n", iVar);
		double dVar = 3.14159;
		System.out.printf("Double variable = %f%n", dVar);
		String str = "Demo";
		System.out.printf("String variable = %s%n", str);

\\

package q11186;
public class StringFormatting {
	public static void main(String[] args) {
		int iVar = 2435;
		
		System.out.printf("%6d%n", iVar);
		System.out.printf("%06d%n", iVar);
		System.out.printf("%+06d%n", iVar);
		System.out.printf("%+,06d%n", iVar);
		System.out.printf("%-,6d%n", iVar);

\\

package q11187;
public class StringFormatting {
	public static void main(String[] args) {
		float dVar = 3.141f;
		
		System.out.printf("%f%n", dVar);
		System.out.printf("%.3f%n", dVar);
		System.out.printf("%.2f%n", dVar);
		System.out.printf("%08.4f%n", dVar);
		System.out.printf("%+08.4f%n", dVar);

\\

package q11188;


public class TestFormatter{
	
	public static void main(String[] args) {
		
		int ans=Integer.parseInt(args[0]);
		
		
		
		System.out.printf("%,+6d", ans);
		
\\

package q11189;


public class TestFormatter{
	
	public static void main(String[] args) {
		
		double ans=Double.parseDouble(args[0]);
		
		
		
		System.out.printf("%,+012.3f", ans);
		
\\

package q11191;


public class Greeting{
	
	public static void main(String[] args) {
		
		String ans=args[0];
		
		
		
		System.out.println("Hello "+ ans +"!");
		
		
\\

package q11192;


public class PrefixCheck{
	
	public static void main(String[] args) {
		
	String ans=args[0];
		
		if(ans.startsWith("en")) System.out.println(ans);
		
		else System.out.println("en"+ ans);
		
		
\\

package q11193;
public class ExpandAString {
	
	
	
	
	public static void main(String[] args) {
		
		String  ans=args[0];
		
		int n=Integer.parseInt(args[1]);
		
	 System.out.println(args[0].repeat(n));
		
		
		
\\


package q11194;


public class  TestSubstring{
	
	public static void main(String[] args) {
		
		System.out.println(args[0].substring(0,3));
		
		
		
\\

package q11195;
public class TestSubstring {
	public static void main(String[] args){
	//	int n=args[0].length
	System.out.println(args[0].substring(0,args[0].length()/2));

\\

package q11196;


public class  TestSubstring{
	
	public static void main(String[] args) {
		
		System.out.println(args[0].substring(1,args[0].length()-1));
	
\\

package q11197;


public class  StringStairs{
	
	public static void main(String[] args) {
		
		for(int i=1;i<=args[0].length();i++){
			
			System.out.println(args[0].substring(0,i));

\\

package q11198;


public class  RemoveChar{
	
	public static void main(String[] args) {
		
		String str=args[0];
		
		System.out.println(str.substring(0, 2) + str.substring(2+1));
		

\\

package q11199;



public class  ExtractTag{
	
	public static void main(String[] args) {
		
		String str=args[0].replace("[","").replace("]","");
		
		System.out.println(str);
		

\\

package q11200;


public class  AttachTag{
	
	public static void main(String[] args) {
		
		String str="["+args[1]+"]"+args[0]+"[/"+args[1]+"]";
		
		System.out.println(str);
		

\\


package q11201;


public class  PutInsideTag{
	
	public static void main(String[] args) {
		
		int mid=args[0].length()/2;
		
		String str=args[0].substring(0,mid) + args[1]+args[0].substring(mid,args[0].length());
		
		System.out.println(str);
		
\\

package q11202;
public class ReverseString{
	public static void main(String[] args){
		String s=args[0];
		String ans="";
		for(int i=s.length()-1;i>=0;i--){
			ans+=s.charAt(i);
		}
		System.out.println(ans.trim());

\\

package q11203;
public class MiddleTwoChars {
	public static void main(String[] args){
		String str=args[0];
		int position;
		
		int length;
		
		if (str.length() % 2 == 0)
		
		{
			
			position = str.length() / 2 - 1;
			
			length = 2;
			
		}
		
		else
		
		{
			
			position = str.length() / 2;
			
			length = 1;
			
		}
		
		System.out.println(str.substring(position, position + length));
		
\\

package q11204;
public class EndsWith{
	
	public static void main(String args[]){
		
		String s1=args[0];
		
		if(s1.endsWith("bad")) System.out.println("true") ;
		
		else System.out.println("false"); 
		

\\

package q11205;
public class EndsWith {
	
	
	public static void main(String args[]){
		
		String s1=args[0].toLowerCase();
		
		if(s1.endsWith(args[1].toLowerCase())) System.out.println("true") ;
		
		else System.out.println("false");
		

\\

package q11206;

public class TestString{
	public static void main(String args[]){
		
		System.out.println(args[0].substring(0,3)+args[0].substring(args[0].length()-3));

\\

package q11207;
public class TestString{
	
	public static void main(String args[]){

	
		System.out.println(args[0].substring(1)+args[0].charAt(0)+"aa");

\\

package q11208;
public class MiddleChar{
	public static void main(String args[]){
		System.out.println(args[0].charAt(args[0].length()/2));

\\

package q11209;

public class CheckChars{
	
	public static void main(String args[]){
		int cnt=0;
		for(int i=0;i<args[0].length();i++){
			
			char check=args[0].charAt(i);
			
			if(check=='w' || check=='e' || check=='b') cnt++;
			
		}
		
		String ans=(cnt>3)?"true":"false";
		
		System.out.println(ans);
		
		
\\

package q11210;
public class AppendChars {
	public static void main(String args[]){
	String ans=args[0].substring(0);
		if(args[0].length()<10) {
		while(ans.length()<10)
		ans+="*";
		}
		System.out.println(ans);

\\


package q11211;
public class RemoveChars{
	
	public static void main(String args[]){
		
	String	str = args[0].replace("x", "");
		
		System.out.println(str);
		
		
\\


package q11212;
public class RemoveSuffix{
	
	public static void main(String[] args){
		
		int n=args[0].length();
		
		if(args[0].substring(0,3).equals(args[0].substring(n-3)))
		
		System.out.println(args[0].substring(0,n-3));
		
		else System.out.println(args[0]);
		
		
\\


package q11213;
public class RemovePrefix {
	
	public static void main(String[] args) {
		
		if((args[0].charAt(0)=='x' && args[0].charAt(1)=='y') || (args[0].charAt(0)=='y' && args[0].charAt(1)=='x'))
		
		System.out.println(args[0]);
		
		else if(args[0].charAt(1)== 'x' || args[0].charAt(1)=='y')
		
		System.out.println(args[0].substring(1));
		
		else if(args[0].charAt(0)=='y' || args[0].charAt(0)=='x')
		
		System.out.println(args[0].substring(0,1) +args[0].substring(2));
		
		else System.out.println(args[0].substring(2));

\\

package q11214;
public class CountChars{
	
	public static void main(String args[]){
		
		String vivek =args[0] ;
		
		Character searchChar = 'o';
		
		long count =vivek.chars().filter(ch -> ch == searchChar).count();
		
		 System.out.println(count);
		 

\\

package q11215;

public class JavaStringBufferDelete{
	
	public static void main(String args[]){
		
		StringBuffer a=new StringBuffer("Hello India");
		
		StringBuffer b=new StringBuffer("Hello World");
		
		StringBuffer c=new StringBuffer("Hello Java");
		
		
		
		 System.out.println(a.delete(0,6));
		 
		   System.out.println(b.delete(0,b.length()));
		   
		      System.out.println(c.delete(0,1));

\\

package q11307;
import java.util.*;
public class StringBuilderDemo {
	public static void main(String[] args) {
		StringBuilder abc = new StringBuilder("Ganga");
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
		System.out.println(abc.append(str));
		System.out.println(abc.delete(0,2));

\\

package q24212;

public class Example {
	
	
	
	    public static void main(String[] args) {
	    	
	    	        String s = args[0];
	    	        
	    	                StringBuilder sb = new StringBuilder();
	    	                
	    	                        for (int i = 0; i < s.length(); i++) {

	                char c = s.charAt(i);
	                
	                            if (Character.isUpperCase(c)) {

                sb.append(c);
                
	    }
	    
}

        System.out.println("The result is: "+sb.toString());
        


\\

package q24216;
public class StringBuilderDemo
{
  public static void main (String args[])
  {
    String s = new String ("AB");
      System.out.print ("In Strings before concatenation Hash Code is: ");
      System.out.println (s.hashCode ());
      s += "C";

    StringBuilder sb = new StringBuilder ("AB");
      System.out.println ("In Strings after concatenation Hash Code is: ");

      System.out.print ("In StringBuilder before concatenation Hash Code is: ");

      System.out.println (sb.hashCode ());

      sb.append ("C");

      System.out.print ("In StringBuilder after concatenation Hash Code is: ");

      System.out.println (sb.hashCode ());


\\

package q11308;
public class ConcatenationDemo {
	public static void main(String[] args) {
		String[] wordsArr = {"I", "AM", "THAT", "I AM"};
		StringBuilder sb = new StringBuilder();
		for (String word : wordsArr) {
			sb.append(word).append(" ");
		}
		String theRealMe = sb.toString();
		System.out.println("theRealMe = " + theRealMe);
	}
}


\\

package q24215;
public class StringbufferExample {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer();
        System.out.println("Initial capacity is: " + sb.capacity());
        sb = new StringBuffer(args[0]);
        System.out.println("Capacity after passing parameter is: " + sb.capacity());
        sb=new StringBuffer(50);
        System.out.println("Creating a StringBuffer object with the given capacity: " + sb.capacity());


\\

package q11288;
public class EnumDemo {
	public static void main(String[] args) {
		System.out.println(printDirectionMessage(Direction.EAST));
		System.out.println(printDirectionMessage(Direction.WEST));
		System.out.println(printDirectionMessage(Direction.NORTH));
		System.out.println(printDirectionMessage(Direction.SOUTH));
	}
	public static String printDirectionMessage(Direction direction) {
		switch (direction) {
			case EAST:
				return "East stands for Light!";
			case WEST:
				return "West stands for Strength!";
			case NORTH:
				return "North stands for Silence!";
			case SOUTH:
				return "South stands for Love!";
		}
		return "Unknown direction. This case will never occur when we use enums.";
	}
}
enum Direction {
	EAST, WEST, NORTH, SOUTH;

\\


		// dummy text
		for(Languages sub : Languages.values()){
						System.out.println(sub);
		}


\\

	// dummy text

    Languages sub = Languages.valueOf("JAVA");

    System.out.println(sub);

    Languages sub1 = Languages.valueOf("PYTHON");

    System.out.println(sub1);

    Languages sub2 = Languages.valueOf("C");

    System.out.println(sub2);

    Languages sub3 = Languages.valueOf("CPP");

    System.out.println(sub3);
    Languages sub4 = Languages.valueOf("DBMS");
    System.out.println(sub4);



\\

package q24202;
enum Student {
  Radha(90),Seetha(62),Ram(50);
  private int total;  
       Student(int total) {	
       	    this.total = total;	    	            	        
       }
    	int display(){                                 	            	
         	return total;                                 	            	            	                    	        
    	}                                                                                             
}

public class Main {
   public static void main(String args[]){
      System.out.println("Total Marks: ");
      
         
    Student s = Student.Radha;
                      
    System.out.println("Radha got "+s.display()+" marks.");
                                                  
    Student s1 = Student.Seetha;
    System.out.println("Seetha got "+s1.display()+" marks.");

	Student s2 = Student.Ram;
	System.out.println("Ram got "+s2.display()+" marks.");

\\


package q11239;
import java.util.*;
public class MathExamples {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		double base = sc.nextDouble();
		double expo = sc.nextDouble();
		System.out.println(base + " to the power " + expo + " is : " + Math.pow(base, expo));
		System.out.println("Square root of " + base + " is : " + Math.sqrt(base));

\\